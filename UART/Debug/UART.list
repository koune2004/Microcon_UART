
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e0c  08004e0c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000005c  08004e70  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004e70  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d69d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8e  00000000  00000000  0002d76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e2  00000000  00000000  00030048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e3c  00000000  00000000  0003082a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1e4  00000000  00000000  00055666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e97ce  00000000  00000000  0006284a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e18  00000000  00000000  0014c018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d50 	.word	0x08004d50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004d50 	.word	0x08004d50

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fb35 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f80b 	bl	80005ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8d0 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f89c 	bl	8000718 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005e0:	f000 f850 	bl	8000684 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTInterruptConfig();
 80005e4:	f000 f950 	bl	8000888 <UARTInterruptConfig>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  UARTPollingMedthod();
	  DummyTask();
 80005e8:	f000 f936 	bl	8000858 <DummyTask>
 80005ec:	e7fc      	b.n	80005e8 <main+0x1c>

080005ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b094      	sub	sp, #80	; 0x50
 80005f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	2238      	movs	r2, #56	; 0x38
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 ff23 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000610:	2000      	movs	r0, #0
 8000612:	f001 f99f 	bl	8001954 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800062c:	2304      	movs	r3, #4
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000630:	2355      	movs	r3, #85	; 0x55
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fa39 	bl	8001abc <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000650:	f000 f94e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2303      	movs	r3, #3
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2104      	movs	r1, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fd37 	bl	80020e0 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000678:	f000 f93a 	bl	80008f0 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <MX_LPUART1_UART_Init+0x90>)
 800068c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	f002 f974 	bl	80029b4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 f90d 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006da:	f003 fdca 	bl	8004272 <HAL_UARTEx_SetTxFifoThreshold>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006e4:	f000 f904 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006ec:	f003 fdff 	bl	80042ee <HAL_UARTEx_SetRxFifoThreshold>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006f6:	f000 f8fb 	bl	80008f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	f003 fd80 	bl	8004200 <HAL_UARTEx_DisableFifoMode>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000706:	f000 f8f3 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	40008000 	.word	0x40008000

08000718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_DMA_Init+0x60>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_DMA_Init+0x60>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	; 0x48
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_DMA_Init+0x60>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_DMA_Init+0x60>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_DMA_Init+0x60>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	; 0x48
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_DMA_Init+0x60>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200b      	movs	r0, #11
 8000754:	f000 fbbf 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000758:	200b      	movs	r0, #11
 800075a:	f000 fbd6 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200c      	movs	r0, #12
 8000764:	f000 fbb7 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000768:	200c      	movs	r0, #12
 800076a:	f000 fbce 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f001 f855 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000816:	f000 fec5 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 feb6 	bl	80015a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2028      	movs	r0, #40	; 0x28
 800083e:	f000 fb4a 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000842:	2028      	movs	r0, #40	; 0x28
 8000844:	f000 fb61 	bl	8000f0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000800 	.word	0x48000800

08000858 <DummyTask>:
		sprintf((char*)TxBuffer,"Received Timeout : %s\r\n",RxBuffer);
		HAL_UART_Transmit(&hlpuart1, TxBuffer , strlen((char*)TxBuffer) , 10);
	}
}

void DummyTask() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick()>=timestamp){
 800085c:	f000 fa54 	bl	8000d08 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <DummyTask+0x2c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d30a      	bcc.n	8000880 <DummyTask+0x28>
		timestamp = HAL_GetTick() + 100;
 800086a:	f000 fa4d 	bl	8000d08 <HAL_GetTick>
 800086e:	4603      	mov	r3, r0
 8000870:	3364      	adds	r3, #100	; 0x64
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <DummyTask+0x2c>)
 8000874:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin);
 8000876:	2120      	movs	r1, #32
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f001 f82c 	bl	80018d8 <HAL_GPIO_TogglePin>
	}
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000208 	.word	0x20000208

08000888 <UARTInterruptConfig>:

void UARTInterruptConfig() {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1 , RxBuffer , 10);
 800088c:	220a      	movs	r2, #10
 800088e:	4903      	ldr	r1, [pc, #12]	; (800089c <UARTInterruptConfig+0x14>)
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <UARTInterruptConfig+0x18>)
 8000892:	f002 f95f 	bl	8002b54 <HAL_UART_Receive_DMA>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001cc 	.word	0x200001cc
 80008a0:	20000078 	.word	0x20000078

080008a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <HAL_UART_RxCpltCallback+0x3c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d111      	bne.n	80008d8 <HAL_UART_RxCpltCallback+0x34>
		RxBuffer[10] = '\0';
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_UART_RxCpltCallback+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	729a      	strb	r2, [r3, #10]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_UART_RxCpltCallback+0x40>)
 80008bc:	490a      	ldr	r1, [pc, #40]	; (80008e8 <HAL_UART_RxCpltCallback+0x44>)
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_UART_RxCpltCallback+0x48>)
 80008c0:	f003 fda2 	bl	8004408 <siprintf>
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer , strlen((char*)TxBuffer) );
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <HAL_UART_RxCpltCallback+0x48>)
 80008c6:	f7ff fcab 	bl	8000220 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <HAL_UART_RxCpltCallback+0x48>)
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <HAL_UART_RxCpltCallback+0x3c>)
 80008d4:	f002 f8be 	bl	8002a54 <HAL_UART_Transmit_DMA>

	}
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000078 	.word	0x20000078
 80008e4:	200001cc 	.word	0x200001cc
 80008e8:	08004d68 	.word	0x08004d68
 80008ec:	200001e0 	.word	0x200001e0

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	; 0x60
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000932:	f001 f8b3 	bl	8001a9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09e      	sub	sp, #120	; 0x78
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2254      	movs	r2, #84	; 0x54
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fd6f 	bl	8004448 <memset>
  if(huart->Instance==LPUART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <HAL_UART_MspInit+0x160>)
 8000970:	4293      	cmp	r3, r2
 8000972:	f040 8092 	bne.w	8000a9a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000976:	2320      	movs	r3, #32
 8000978:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fdc8 	bl	8002518 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800098e:	f7ff ffaf 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 8000994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 80009a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <HAL_UART_MspInit+0x164>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009c2:	230c      	movs	r3, #12
 80009c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009d2:	230c      	movs	r3, #12
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fde0 	bl	80015a4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <HAL_UART_MspInit+0x168>)
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_UART_MspInit+0x16c>)
 80009e8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <HAL_UART_MspInit+0x168>)
 80009ec:	2222      	movs	r2, #34	; 0x22
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <HAL_UART_MspInit+0x168>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_UART_MspInit+0x168>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_UART_MspInit+0x168>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a10:	2220      	movs	r2, #32
 8000a12:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000a1a:	4824      	ldr	r0, [pc, #144]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a1c:	f000 fa90 	bl	8000f40 <HAL_DMA_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000a26:	f7ff ff63 	bl	80008f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <HAL_UART_MspInit+0x168>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <HAL_UART_MspInit+0x174>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a40:	2223      	movs	r2, #35	; 0x23
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a70:	f000 fa66 	bl	8000f40 <HAL_DMA_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000a7a:	f7ff ff39 	bl	80008f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a82:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_UART_MspInit+0x170>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	205b      	movs	r0, #91	; 0x5b
 8000a90:	f000 fa21 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a94:	205b      	movs	r0, #91	; 0x5b
 8000a96:	f000 fa38 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3778      	adds	r7, #120	; 0x78
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40008000 	.word	0x40008000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	2000010c 	.word	0x2000010c
 8000ab0:	40020008 	.word	0x40020008
 8000ab4:	2000016c 	.word	0x2000016c
 8000ab8:	4002001c 	.word	0x4002001c

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f8ec 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <DMA1_Channel1_IRQHandler+0x10>)
 8000b16:	f000 fbf6 	bl	8001306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000010c 	.word	0x2000010c

08000b24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DMA1_Channel2_IRQHandler+0x10>)
 8000b2a:	f000 fbec 	bl	8001306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000016c 	.word	0x2000016c

08000b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b40:	f000 fee4 	bl	800190c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <LPUART1_IRQHandler+0x10>)
 8000b4e:	f002 f84d 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000078 	.word	0x20000078

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f003 fc64 	bl	8004458 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20020000 	.word	0x20020000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	2000020c 	.word	0x2000020c
 8000bc4:	20000360 	.word	0x20000360

08000bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f003 fc23 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fcd5 	bl	80005cc <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c30:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8000c34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c38:	2000035c 	.word	0x2000035c

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>

08000c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f939 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f80e 	bl	8000c70 <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c60:	f7ff fe4c 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	79fb      	ldrb	r3, [r7, #7]

}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d022      	beq.n	8000cca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_InitTick+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f944 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d809      	bhi.n	8000cbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb2:	f000 f910 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_InitTick+0x70>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e004      	b.n	8000cce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e001      	b.n	8000cce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x1c>)
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000210 	.word	0x20000210
 8000d04:	20000008 	.word	0x20000008

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000210 	.word	0x20000210

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff40 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff33 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa4 	bl	8000e7c <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e08d      	b.n	800106e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_DMA_Init+0x138>)
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d80f      	bhi.n	8000f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b45      	ldr	r3, [pc, #276]	; (800107c <HAL_DMA_Init+0x13c>)
 8000f66:	4413      	add	r3, r2
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_DMA_Init+0x140>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	009a      	lsls	r2, r3, #2
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a42      	ldr	r2, [pc, #264]	; (8001084 <HAL_DMA_Init+0x144>)
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7c:	e00e      	b.n	8000f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_DMA_Init+0x148>)
 8000f86:	4413      	add	r3, r2
 8000f88:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <HAL_DMA_Init+0x140>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	009a      	lsls	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_DMA_Init+0x14c>)
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fa76 	bl	80014e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ffc:	d102      	bne.n	8001004 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001018:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d010      	beq.n	8001044 <HAL_DMA_Init+0x104>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d80c      	bhi.n	8001044 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fa96 	bl	800155c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e008      	b.n	8001056 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020407 	.word	0x40020407
 800107c:	bffdfff8 	.word	0xbffdfff8
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	40020000 	.word	0x40020000
 8001088:	bffdfbf8 	.word	0xbffdfbf8
 800108c:	40020400 	.word	0x40020400

08001090 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Start_IT+0x20>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e066      	b.n	800117e <HAL_DMA_Start_IT+0xee>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d155      	bne.n	8001170 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f9bb 	bl	8001464 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 020e 	orr.w	r2, r2, #14
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00f      	b.n	8001128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0204 	bic.w	r2, r2, #4
 8001116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 020a 	orr.w	r2, r2, #10
 8001126:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001144:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800115c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e005      	b.n	800117c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001178:	2302      	movs	r3, #2
 800117a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800117c:	7dfb      	ldrb	r3, [r7, #23]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d005      	beq.n	80011aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e037      	b.n	800121a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 020e 	bic.w	r2, r2, #14
 80011b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f003 021f 	and.w	r2, r3, #31
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001218:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d00d      	beq.n	800126c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2204      	movs	r2, #4
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e047      	b.n	80012fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020e 	bic.w	r2, r2, #14
 800127a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0201 	bic.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800129a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
    }
  }
  return status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2204      	movs	r2, #4
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d026      	beq.n	8001380 <HAL_DMA_IRQHandler+0x7a>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d021      	beq.n	8001380 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	2b00      	cmp	r3, #0
 8001348:	d107      	bne.n	800135a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0204 	bic.w	r2, r2, #4
 8001358:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 021f 	and.w	r2, r3, #31
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2104      	movs	r1, #4
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	2b00      	cmp	r3, #0
 8001374:	d071      	beq.n	800145a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800137e:	e06c      	b.n	800145a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2202      	movs	r2, #2
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02e      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d029      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10b      	bne.n	80013c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 020a 	bic.w	r2, r2, #10
 80013ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	2102      	movs	r1, #2
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d038      	beq.n	800145a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013f0:	e033      	b.n	800145a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2208      	movs	r2, #8
 80013fc:	409a      	lsls	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02a      	beq.n	800145c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d025      	beq.n	800145c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 020e 	bic.w	r2, r2, #14
 800141e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800145a:	bf00      	nop
 800145c:	bf00      	nop
}
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800147a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800148c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 021f 	and.w	r2, r3, #31
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d108      	bne.n	80014c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014c2:	e007      	b.n	80014d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d802      	bhi.n	80014fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e001      	b.n	80014fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3b08      	subs	r3, #8
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	009a      	lsls	r2, r3, #2
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4413      	add	r3, r2
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800152a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2201      	movs	r2, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	651a      	str	r2, [r3, #80]	; 0x50
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40020407 	.word	0x40020407
 800154c:	40020800 	.word	0x40020800
 8001550:	40020820 	.word	0x40020820
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	40020880 	.word	0x40020880

0800155c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800157e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	1000823f 	.word	0x1000823f
 80015a0:	40020940 	.word	0x40020940

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015b2:	e15a      	b.n	800186a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 814c 	beq.w	8001864 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d005      	beq.n	80015e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 0201 	and.w	r2, r3, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b03      	cmp	r3, #3
 8001650:	d017      	beq.n	8001682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d123      	bne.n	80016d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0203 	and.w	r2, r3, #3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80a6 	beq.w	8001864 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 800171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171c:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6613      	str	r3, [r2, #96]	; 0x60
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 8001726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001730:	4a56      	ldr	r2, [pc, #344]	; (800188c <HAL_GPIO_Init+0x2e8>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800175a:	d01f      	beq.n	800179c <HAL_GPIO_Init+0x1f8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_GPIO_Init+0x2ec>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d019      	beq.n	8001798 <HAL_GPIO_Init+0x1f4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d013      	beq.n	8001794 <HAL_GPIO_Init+0x1f0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a4a      	ldr	r2, [pc, #296]	; (8001898 <HAL_GPIO_Init+0x2f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_GPIO_Init+0x2f8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x2fc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_Init+0x1e4>
 8001784:	2305      	movs	r3, #5
 8001786:	e00a      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001788:	2306      	movs	r3, #6
 800178a:	e008      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 800178c:	2304      	movs	r3, #4
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001790:	2303      	movs	r3, #3
 8001792:	e004      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001794:	2302      	movs	r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_GPIO_Init+0x1fa>
 800179c:	2300      	movs	r3, #0
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	f002 0203 	and.w	r2, r2, #3
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ae:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_GPIO_Init+0x2e8>)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_GPIO_Init+0x300>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800180a:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_GPIO_Init+0x300>)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x300>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f ae9d 	bne.w	80015b4 <HAL_GPIO_Init+0x10>
  }
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43d9      	mvns	r1, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	400b      	ands	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f806 	bl	800193c <HAL_GPIO_EXTI_Callback>
  }
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d141      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	d131      	bne.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001970:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001976:	4a46      	ldr	r2, [pc, #280]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800197c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001980:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001988:	4a41      	ldr	r2, [pc, #260]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001990:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2232      	movs	r2, #50	; 0x32
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a6:	e002      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ba:	d102      	bne.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f2      	bne.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ce:	d158      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e057      	b.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019da:	4a2d      	ldr	r2, [pc, #180]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019e4:	e04d      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ec:	d141      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d131      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2232      	movs	r2, #50	; 0x32
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a32:	e002      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d102      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f2      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d112      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e011      	b.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a70:	e007      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40007000 	.word	0x40007000
 8001a94:	20000000 	.word	0x20000000
 8001a98:	431bde83 	.word	0x431bde83

08001a9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	6093      	str	r3, [r2, #8]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e2fe      	b.n	80020cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d075      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ada:	4b97      	ldr	r3, [pc, #604]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	4b94      	ldr	r3, [pc, #592]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0x3e>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_OscConfig+0x44>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x108>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e2d9      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x74>
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a84      	ldr	r2, [pc, #528]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7b      	ldr	r2, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xb0>
 8001b54:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a77      	ldr	r2, [pc, #476]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a74      	ldr	r2, [pc, #464]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f8c8 	bl	8000d08 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f8c4 	bl	8000d08 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e29e      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xc0>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8b4 	bl	8000d08 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f8b0 	bl	8000d08 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e28a      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb6:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xe8>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d075      	beq.n	8001cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x136>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x13c>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d11f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x154>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e25d      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b49      	ldr	r3, [pc, #292]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	4946      	ldr	r1, [pc, #280]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <HAL_RCC_OscConfig+0x280>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f821 	bl	8000c70 <HAL_InitTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d043      	beq.n	8001cbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e249      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d023      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f85c 	bl	8000d08 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f858 	bl	8000d08 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e232      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	061b      	lsls	r3, r3, #24
 8001c80:	492d      	ldr	r1, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
 8001c86:	e01a      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f838 	bl	8000d08 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f834 	bl	8000d08 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e20e      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1e0>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d041      	beq.n	8001d4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f811 	bl	8000d08 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff f80d 	bl	8000d08 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1e7      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ef      	beq.n	8001cea <HAL_RCC_OscConfig+0x22e>
 8001d0a:	e020      	b.n	8001d4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fff4 	bl	8000d08 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d22:	e00d      	b.n	8001d40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7fe fff0 	bl	8000d08 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d906      	bls.n	8001d40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1ca      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ea      	bne.n	8001d24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a6 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d60:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2b4>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x2b6>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d92:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x4bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x4bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a75      	ldr	r2, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4bc>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7fe ffad 	bl	8000d08 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7fe ffa9 	bl	8000d08 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e183      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	4b6c      	ldr	r3, [pc, #432]	; (8001f78 <HAL_RCC_OscConfig+0x4bc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_RCC_OscConfig+0x32e>
 8001dd8:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	e024      	b.n	8001e34 <HAL_RCC_OscConfig+0x378>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d110      	bne.n	8001e14 <HAL_RCC_OscConfig+0x358>
 8001df2:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x378>
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d016      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7fe ff64 	bl	8000d08 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe ff60 	bl	8000d08 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e138      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ed      	beq.n	8001e44 <HAL_RCC_OscConfig+0x388>
 8001e68:	e015      	b.n	8001e96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7fe ff4d 	bl	8000d08 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe ff49 	bl	8000d08 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e121      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ed      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d03c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7fe ff1c 	bl	8000d08 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed4:	f7fe ff18 	bl	8000d08 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0f2      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ef      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x418>
 8001ef4:	e01b      	b.n	8001f2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7fe feff 	bl	8000d08 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7fe fefb 	bl	8000d08 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0d5      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80c9 	beq.w	80020ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	f000 8083 	beq.w	800204c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d15e      	bne.n	800200c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fed5 	bl	8000d08 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	e00c      	b.n	8001f7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fed1 	bl	8000d08 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d905      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0ab      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ec      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x61c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6a11      	ldr	r1, [r2, #32]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f98:	3a01      	subs	r2, #1
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fa2:	0212      	lsls	r2, r2, #8
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001faa:	0852      	lsrs	r2, r2, #1
 8001fac:	3a01      	subs	r2, #1
 8001fae:	0552      	lsls	r2, r2, #21
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0652      	lsls	r2, r2, #25
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fc2:	06d2      	lsls	r2, r2, #27
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	4943      	ldr	r1, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe90 	bl	8000d08 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fe8c 	bl	8000d08 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e066      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x530>
 800200a:	e05e      	b.n	80020ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe76 	bl	8000d08 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe fe72 	bl	8000d08 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e04c      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4924      	ldr	r1, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x620>)
 8002046:	4013      	ands	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]
 800204a:	e03e      	b.n	80020ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e039      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x618>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	429a      	cmp	r2, r3
 800206a:	d12c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d123      	bne.n	80020c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d11b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d113      	bne.n	80020c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	019f800c 	.word	0x019f800c
 80020dc:	feeefffc 	.word	0xfeeefffc

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e11e      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b91      	ldr	r3, [pc, #580]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	498c      	ldr	r1, [pc, #560]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e106      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d073      	beq.n	800221c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d129      	bne.n	8002190 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0f4      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800214c:	f000 f99e 	bl	800248c <RCC_GetSysClockFreqFromPLLSource>
 8002150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4a7c      	ldr	r2, [pc, #496]	; (8002348 <HAL_RCC_ClockConfig+0x268>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d93f      	bls.n	80021da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800215a:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800216e:	2b00      	cmp	r3, #0
 8002170:	d033      	beq.n	80021da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12f      	bne.n	80021da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800217a:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002182:	4a70      	ldr	r2, [pc, #448]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e024      	b.n	80021da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0c6      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0be      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021b8:	f000 f8ce 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4a61      	ldr	r2, [pc, #388]	; (8002348 <HAL_RCC_ClockConfig+0x268>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d909      	bls.n	80021da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ce:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4957      	ldr	r1, [pc, #348]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ec:	f7fe fd8c 	bl	8000d08 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe fd88 	bl	8000d08 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e095      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a42      	ldr	r2, [pc, #264]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800223a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800223e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4936      	ldr	r1, [pc, #216]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
 800226e:	e008      	b.n	8002282 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b80      	cmp	r3, #128	; 0x80
 8002274:	d105      	bne.n	8002282 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 800227c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002280:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d21d      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 020f 	bic.w	r2, r3, #15
 8002298:	4929      	ldr	r1, [pc, #164]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fd32 	bl	8000d08 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fd2e 	bl	8000d08 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e03b      	b.n	8002336 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1ed      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4917      	ldr	r1, [pc, #92]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490f      	ldr	r1, [pc, #60]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230a:	f000 f825 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_RCC_ClockConfig+0x264>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490c      	ldr	r1, [pc, #48]	; (800234c <HAL_RCC_ClockConfig+0x26c>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x270>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x274>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fc9e 	bl	8000c70 <HAL_InitTick>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000
 8002344:	40021000 	.word	0x40021000
 8002348:	04c4b400 	.word	0x04c4b400
 800234c:	08004d90 	.word	0x08004d90
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d102      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_RCC_GetSysClockFreq+0xbc>)
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e047      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d102      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800237c:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_RCC_GetSysClockFreq+0xc0>)
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e03e      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d136      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ac:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	68d2      	ldr	r2, [r2, #12]
 80023b8:	0a12      	lsrs	r2, r2, #8
 80023ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
      break;
 80023c4:	e00c      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	0a12      	lsrs	r2, r2, #8
 80023d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
      break;
 80023de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0e5b      	lsrs	r3, r3, #25
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e001      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002400:	693b      	ldr	r3, [r7, #16]
}
 8002402:	4618      	mov	r0, r3
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	00f42400 	.word	0x00f42400
 8002418:	016e3600 	.word	0x016e3600

0800241c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK1Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08004da0 	.word	0x08004da0

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002464:	f7ff ffda 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0adb      	lsrs	r3, r3, #11
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08004da0 	.word	0x08004da0

0800248c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d10c      	bne.n	80024ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ba:	68d2      	ldr	r2, [r2, #12]
 80024bc:	0a12      	lsrs	r2, r2, #8
 80024be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
    break;
 80024c8:	e00c      	b.n	80024e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	0a12      	lsrs	r2, r2, #8
 80024d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
    break;
 80024e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0e5b      	lsrs	r3, r3, #25
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024fe:	687b      	ldr	r3, [r7, #4]
}
 8002500:	4618      	mov	r0, r3
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40021000 	.word	0x40021000
 8002510:	016e3600 	.word	0x016e3600
 8002514:	00f42400 	.word	0x00f42400

08002518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002520:	2300      	movs	r3, #0
 8002522:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002524:	2300      	movs	r3, #0
 8002526:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8098 	beq.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a39      	ldr	r2, [pc, #228]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256e:	f7fe fbcb 	bl	8000d08 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002574:	e009      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe fbc7 	bl	8000d08 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d902      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	74fb      	strb	r3, [r7, #19]
        break;
 8002588:	e005      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0ef      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d159      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01e      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d019      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fb87 	bl	8000d08 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fc:	e00b      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fb83 	bl	8000d08 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d902      	bls.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	74fb      	strb	r3, [r7, #19]
            break;
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ec      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002640:	e008      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	74bb      	strb	r3, [r7, #18]
 8002646:	e005      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002654:	7c7b      	ldrb	r3, [r7, #17]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4ba7      	ldr	r3, [pc, #668]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4aa6      	ldr	r2, [pc, #664]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002672:	4ba1      	ldr	r3, [pc, #644]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f023 0203 	bic.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	499d      	ldr	r1, [pc, #628]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002694:	4b98      	ldr	r3, [pc, #608]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 020c 	bic.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4995      	ldr	r1, [pc, #596]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026b6:	4b90      	ldr	r3, [pc, #576]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	498c      	ldr	r1, [pc, #560]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d8:	4b87      	ldr	r3, [pc, #540]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4984      	ldr	r1, [pc, #528]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	497b      	ldr	r1, [pc, #492]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800271c:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	4973      	ldr	r1, [pc, #460]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273e:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	496a      	ldr	r1, [pc, #424]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002760:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4962      	ldr	r1, [pc, #392]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	4959      	ldr	r1, [pc, #356]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027a4:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	4951      	ldr	r1, [pc, #324]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4948      	ldr	r1, [pc, #288]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4940      	ldr	r1, [pc, #256]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	4932      	ldr	r1, [pc, #200]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	4924      	ldr	r1, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	4916      	ldr	r1, [pc, #88]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d019      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e6:	d109      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a02      	ldr	r2, [pc, #8]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	60d3      	str	r3, [r2, #12]
 80028f4:	e002      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4926      	ldr	r1, [pc, #152]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800292e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002932:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	4918      	ldr	r1, [pc, #96]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d105      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800297a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002996:	d105      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800299e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e042      	b.n	8002a4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fd ffb3 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2224      	movs	r2, #36	; 0x24
 80029e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 ff48 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fc49 	bl	800329c <UART_SetConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e01b      	b.n	8002a4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 ffc7 	bl	80039d8 <UART_CheckIdleState>
 8002a4a:	4603      	mov	r3, r0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d167      	bne.n	8002b3c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Transmit_DMA+0x24>
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e060      	b.n	8002b3e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d028      	beq.n	8002afc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aae:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_UART_Transmit_DMA+0xf4>)
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_UART_Transmit_DMA+0xf8>)
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002abe:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <HAL_UART_Transmit_DMA+0xfc>)
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3328      	adds	r3, #40	; 0x28
 8002ada:	461a      	mov	r2, r3
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	f7fe fad7 	bl	8001090 <HAL_DMA_Start_IT>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2210      	movs	r2, #16
 8002aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e020      	b.n	8002b3e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3308      	adds	r3, #8
 8002b0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	613b      	str	r3, [r7, #16]
   return(result);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	623a      	str	r2, [r7, #32]
 8002b26:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69f9      	ldr	r1, [r7, #28]
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	08003ea3 	.word	0x08003ea3
 8002b4c:	08003f3d 	.word	0x08003f3d
 8002b50:	080040c3 	.word	0x080040c3

08002b54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d137      	bne.n	8002bdc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_Receive_DMA+0x24>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e030      	b.n	8002bde <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_UART_Receive_DMA+0x94>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d01f      	beq.n	8002bcc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	69f9      	ldr	r1, [r7, #28]
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e6      	bne.n	8002b9a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 f818 	bl	8003c08 <UART_Start_Receive_DMA>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40008000 	.word	0x40008000

08002bec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0ba      	sub	sp, #232	; 0xe8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c16:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11b      	bne.n	8002c60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 82e3 	beq.w	800321c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
      }
      return;
 8002c5e:	e2dd      	b.n	800321c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8123 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002c6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	; (8002ea4 <HAL_UART_IRQHandler+0x2b8>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ea8 <HAL_UART_IRQHandler+0x2bc>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8116 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d011      	beq.n	8002cb4 <HAL_UART_IRQHandler+0xc8>
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d011      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xf8>
 8002cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d011      	beq.n	8002d14 <HAL_UART_IRQHandler+0x128>
 8002cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2204      	movs	r2, #4
 8002d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002d30:	4b5c      	ldr	r3, [pc, #368]	; (8002ea4 <HAL_UART_IRQHandler+0x2b8>)
 8002d32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f043 0208 	orr.w	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d012      	beq.n	8002d82 <HAL_UART_IRQHandler+0x196>
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8249 	beq.w	8003220 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d013      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d005      	beq.n	8002de6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d054      	beq.n	8002e90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fff5 	bl	8003dd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d146      	bne.n	8002e88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3308      	adds	r3, #8
 8002e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1d9      	bne.n	8002dfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d017      	beq.n	8002e80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_UART_IRQHandler+0x2c0>)
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f9e9 	bl	8001238 <HAL_DMA_Abort_IT>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7e:	e00f      	b.n	8002ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f9f5 	bl	8003270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e86:	e00b      	b.n	8002ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9f1 	bl	8003270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	e007      	b.n	8002ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9ed 	bl	8003270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002e9e:	e1bf      	b.n	8003220 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	bf00      	nop
    return;
 8002ea2:	e1bd      	b.n	8003220 <HAL_UART_IRQHandler+0x634>
 8002ea4:	10000001 	.word	0x10000001
 8002ea8:	04000120 	.word	0x04000120
 8002eac:	08004143 	.word	0x08004143

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 8153 	bne.w	8003160 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 814c 	beq.w	8003160 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8145 	beq.w	8003160 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	f040 80bb 	bne.w	8003064 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 818f 	beq.w	8003224 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f080 8187 	bcs.w	8003224 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 8087 	bne.w	8003042 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1da      	bne.n	8002f34 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e1      	bne.n	8002f7e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	f023 0310 	bic.w	r3, r3, #16
 8003014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003022:	65bb      	str	r3, [r7, #88]	; 0x58
 8003024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe f8a2 	bl	8001186 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003054:	b29b      	uxth	r3, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f911 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003062:	e0df      	b.n	8003224 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003070:	b29b      	uxth	r3, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80d1 	beq.w	8003228 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80cc 	beq.w	8003228 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b2:	647b      	str	r3, [r7, #68]	; 0x44
 80030b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e4      	bne.n	8003090 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	623b      	str	r3, [r7, #32]
   return(result);
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ee:	633a      	str	r2, [r7, #48]	; 0x30
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e1      	bne.n	80030c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60fb      	str	r3, [r7, #12]
   return(result);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0310 	bic.w	r3, r3, #16
 800312a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	69b9      	ldr	r1, [r7, #24]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	617b      	str	r3, [r7, #20]
   return(result);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e4      	bne.n	8003116 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f893 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800315e:	e063      	b.n	8003228 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00e      	beq.n	800318a <HAL_UART_IRQHandler+0x59e>
 800316c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003180:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f001 f81e 	bl	80041c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003188:	e051      	b.n	800322e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d014      	beq.n	80031c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80031a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03a      	beq.n	800322c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
    }
    return;
 80031be:	e035      	b.n	800322c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5f4>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 ffc8 	bl	800416e <UART_EndTransmit_IT>
    return;
 80031de:	e026      	b.n	800322e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_UART_IRQHandler+0x614>
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fff7 	bl	80041ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031fe:	e016      	b.n	800322e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_UART_IRQHandler+0x642>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0c      	bge.n	800322e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 ffdf 	bl	80041d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800321a:	e008      	b.n	800322e <HAL_UART_IRQHandler+0x642>
      return;
 800321c:	bf00      	nop
 800321e:	e006      	b.n	800322e <HAL_UART_IRQHandler+0x642>
    return;
 8003220:	bf00      	nop
 8003222:	e004      	b.n	800322e <HAL_UART_IRQHandler+0x642>
      return;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_UART_IRQHandler+0x642>
      return;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_UART_IRQHandler+0x642>
    return;
 800322c:	bf00      	nop
  }
}
 800322e:	37e8      	adds	r7, #232	; 0xe8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b08c      	sub	sp, #48	; 0x30
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4baa      	ldr	r3, [pc, #680]	; (8003574 <UART_SetConfig+0x2d8>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a9f      	ldr	r2, [pc, #636]	; (8003578 <UART_SetConfig+0x2dc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003304:	4313      	orrs	r3, r2
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003312:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f023 010f 	bic.w	r1, r3, #15
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a90      	ldr	r2, [pc, #576]	; (800357c <UART_SetConfig+0x2e0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d125      	bne.n	800338c <UART_SetConfig+0xf0>
 8003340:	4b8f      	ldr	r3, [pc, #572]	; (8003580 <UART_SetConfig+0x2e4>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b03      	cmp	r3, #3
 800334c:	d81a      	bhi.n	8003384 <UART_SetConfig+0xe8>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <UART_SetConfig+0xb8>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003365 	.word	0x08003365
 8003358:	08003375 	.word	0x08003375
 800335c:	0800336d 	.word	0x0800336d
 8003360:	0800337d 	.word	0x0800337d
 8003364:	2301      	movs	r3, #1
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336a:	e116      	b.n	800359a <UART_SetConfig+0x2fe>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003372:	e112      	b.n	800359a <UART_SetConfig+0x2fe>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800337a:	e10e      	b.n	800359a <UART_SetConfig+0x2fe>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003382:	e10a      	b.n	800359a <UART_SetConfig+0x2fe>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800338a:	e106      	b.n	800359a <UART_SetConfig+0x2fe>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <UART_SetConfig+0x2e8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d138      	bne.n	8003408 <UART_SetConfig+0x16c>
 8003396:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <UART_SetConfig+0x2e4>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d82d      	bhi.n	8003400 <UART_SetConfig+0x164>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x110>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	08003401 	.word	0x08003401
 80033b4:	08003401 	.word	0x08003401
 80033b8:	08003401 	.word	0x08003401
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003401 	.word	0x08003401
 80033c8:	08003401 	.word	0x08003401
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	08003401 	.word	0x08003401
 80033d4:	08003401 	.word	0x08003401
 80033d8:	08003401 	.word	0x08003401
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e6:	e0d8      	b.n	800359a <UART_SetConfig+0x2fe>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ee:	e0d4      	b.n	800359a <UART_SetConfig+0x2fe>
 80033f0:	2304      	movs	r3, #4
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f6:	e0d0      	b.n	800359a <UART_SetConfig+0x2fe>
 80033f8:	2308      	movs	r3, #8
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fe:	e0cc      	b.n	800359a <UART_SetConfig+0x2fe>
 8003400:	2310      	movs	r3, #16
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003406:	e0c8      	b.n	800359a <UART_SetConfig+0x2fe>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5e      	ldr	r2, [pc, #376]	; (8003588 <UART_SetConfig+0x2ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d125      	bne.n	800345e <UART_SetConfig+0x1c2>
 8003412:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <UART_SetConfig+0x2e4>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800341c:	2b30      	cmp	r3, #48	; 0x30
 800341e:	d016      	beq.n	800344e <UART_SetConfig+0x1b2>
 8003420:	2b30      	cmp	r3, #48	; 0x30
 8003422:	d818      	bhi.n	8003456 <UART_SetConfig+0x1ba>
 8003424:	2b20      	cmp	r3, #32
 8003426:	d00a      	beq.n	800343e <UART_SetConfig+0x1a2>
 8003428:	2b20      	cmp	r3, #32
 800342a:	d814      	bhi.n	8003456 <UART_SetConfig+0x1ba>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <UART_SetConfig+0x19a>
 8003430:	2b10      	cmp	r3, #16
 8003432:	d008      	beq.n	8003446 <UART_SetConfig+0x1aa>
 8003434:	e00f      	b.n	8003456 <UART_SetConfig+0x1ba>
 8003436:	2300      	movs	r3, #0
 8003438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343c:	e0ad      	b.n	800359a <UART_SetConfig+0x2fe>
 800343e:	2302      	movs	r3, #2
 8003440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003444:	e0a9      	b.n	800359a <UART_SetConfig+0x2fe>
 8003446:	2304      	movs	r3, #4
 8003448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344c:	e0a5      	b.n	800359a <UART_SetConfig+0x2fe>
 800344e:	2308      	movs	r3, #8
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003454:	e0a1      	b.n	800359a <UART_SetConfig+0x2fe>
 8003456:	2310      	movs	r3, #16
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345c:	e09d      	b.n	800359a <UART_SetConfig+0x2fe>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4a      	ldr	r2, [pc, #296]	; (800358c <UART_SetConfig+0x2f0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d125      	bne.n	80034b4 <UART_SetConfig+0x218>
 8003468:	4b45      	ldr	r3, [pc, #276]	; (8003580 <UART_SetConfig+0x2e4>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003472:	2bc0      	cmp	r3, #192	; 0xc0
 8003474:	d016      	beq.n	80034a4 <UART_SetConfig+0x208>
 8003476:	2bc0      	cmp	r3, #192	; 0xc0
 8003478:	d818      	bhi.n	80034ac <UART_SetConfig+0x210>
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d00a      	beq.n	8003494 <UART_SetConfig+0x1f8>
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d814      	bhi.n	80034ac <UART_SetConfig+0x210>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <UART_SetConfig+0x1f0>
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d008      	beq.n	800349c <UART_SetConfig+0x200>
 800348a:	e00f      	b.n	80034ac <UART_SetConfig+0x210>
 800348c:	2300      	movs	r3, #0
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003492:	e082      	b.n	800359a <UART_SetConfig+0x2fe>
 8003494:	2302      	movs	r3, #2
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349a:	e07e      	b.n	800359a <UART_SetConfig+0x2fe>
 800349c:	2304      	movs	r3, #4
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a2:	e07a      	b.n	800359a <UART_SetConfig+0x2fe>
 80034a4:	2308      	movs	r3, #8
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e076      	b.n	800359a <UART_SetConfig+0x2fe>
 80034ac:	2310      	movs	r3, #16
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e072      	b.n	800359a <UART_SetConfig+0x2fe>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	; (8003590 <UART_SetConfig+0x2f4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d12a      	bne.n	8003514 <UART_SetConfig+0x278>
 80034be:	4b30      	ldr	r3, [pc, #192]	; (8003580 <UART_SetConfig+0x2e4>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034cc:	d01a      	beq.n	8003504 <UART_SetConfig+0x268>
 80034ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d2:	d81b      	bhi.n	800350c <UART_SetConfig+0x270>
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d00c      	beq.n	80034f4 <UART_SetConfig+0x258>
 80034da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034de:	d815      	bhi.n	800350c <UART_SetConfig+0x270>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <UART_SetConfig+0x250>
 80034e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e8:	d008      	beq.n	80034fc <UART_SetConfig+0x260>
 80034ea:	e00f      	b.n	800350c <UART_SetConfig+0x270>
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e052      	b.n	800359a <UART_SetConfig+0x2fe>
 80034f4:	2302      	movs	r3, #2
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fa:	e04e      	b.n	800359a <UART_SetConfig+0x2fe>
 80034fc:	2304      	movs	r3, #4
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003502:	e04a      	b.n	800359a <UART_SetConfig+0x2fe>
 8003504:	2308      	movs	r3, #8
 8003506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350a:	e046      	b.n	800359a <UART_SetConfig+0x2fe>
 800350c:	2310      	movs	r3, #16
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003512:	e042      	b.n	800359a <UART_SetConfig+0x2fe>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a17      	ldr	r2, [pc, #92]	; (8003578 <UART_SetConfig+0x2dc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d13a      	bne.n	8003594 <UART_SetConfig+0x2f8>
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <UART_SetConfig+0x2e4>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352c:	d01a      	beq.n	8003564 <UART_SetConfig+0x2c8>
 800352e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003532:	d81b      	bhi.n	800356c <UART_SetConfig+0x2d0>
 8003534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003538:	d00c      	beq.n	8003554 <UART_SetConfig+0x2b8>
 800353a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353e:	d815      	bhi.n	800356c <UART_SetConfig+0x2d0>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <UART_SetConfig+0x2b0>
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	d008      	beq.n	800355c <UART_SetConfig+0x2c0>
 800354a:	e00f      	b.n	800356c <UART_SetConfig+0x2d0>
 800354c:	2300      	movs	r3, #0
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e022      	b.n	800359a <UART_SetConfig+0x2fe>
 8003554:	2302      	movs	r3, #2
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e01e      	b.n	800359a <UART_SetConfig+0x2fe>
 800355c:	2304      	movs	r3, #4
 800355e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003562:	e01a      	b.n	800359a <UART_SetConfig+0x2fe>
 8003564:	2308      	movs	r3, #8
 8003566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356a:	e016      	b.n	800359a <UART_SetConfig+0x2fe>
 800356c:	2310      	movs	r3, #16
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003572:	e012      	b.n	800359a <UART_SetConfig+0x2fe>
 8003574:	cfff69f3 	.word	0xcfff69f3
 8003578:	40008000 	.word	0x40008000
 800357c:	40013800 	.word	0x40013800
 8003580:	40021000 	.word	0x40021000
 8003584:	40004400 	.word	0x40004400
 8003588:	40004800 	.word	0x40004800
 800358c:	40004c00 	.word	0x40004c00
 8003590:	40005000 	.word	0x40005000
 8003594:	2310      	movs	r3, #16
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4aae      	ldr	r2, [pc, #696]	; (8003858 <UART_SetConfig+0x5bc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f040 8097 	bne.w	80036d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d823      	bhi.n	80035f6 <UART_SetConfig+0x35a>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x318>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035f7 	.word	0x080035f7
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035f7 	.word	0x080035f7
 80035c4:	080035e7 	.word	0x080035e7
 80035c8:	080035f7 	.word	0x080035f7
 80035cc:	080035f7 	.word	0x080035f7
 80035d0:	080035f7 	.word	0x080035f7
 80035d4:	080035ef 	.word	0x080035ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe ff2c 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80035dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035de:	e010      	b.n	8003602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e0:	4b9e      	ldr	r3, [pc, #632]	; (800385c <UART_SetConfig+0x5c0>)
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035e4:	e00d      	b.n	8003602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e6:	f7fe feb7 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035ec:	e009      	b.n	8003602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035f4:	e005      	b.n	8003602 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8130 	beq.w	800386a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	4a94      	ldr	r2, [pc, #592]	; (8003860 <UART_SetConfig+0x5c4>)
 8003610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003614:	461a      	mov	r2, r3
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	fbb3 f3f2 	udiv	r3, r3, r2
 800361c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d305      	bcc.n	800363a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003640:	e113      	b.n	800386a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2200      	movs	r2, #0
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	60fa      	str	r2, [r7, #12]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4a84      	ldr	r2, [pc, #528]	; (8003860 <UART_SetConfig+0x5c4>)
 8003650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003654:	b29b      	uxth	r3, r3
 8003656:	2200      	movs	r2, #0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003664:	f7fc fe34 	bl	80002d0 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	020b      	lsls	r3, r1, #8
 800367a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800367e:	0202      	lsls	r2, r0, #8
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	6849      	ldr	r1, [r1, #4]
 8003684:	0849      	lsrs	r1, r1, #1
 8003686:	2000      	movs	r0, #0
 8003688:	460c      	mov	r4, r1
 800368a:	4605      	mov	r5, r0
 800368c:	eb12 0804 	adds.w	r8, r2, r4
 8003690:	eb43 0905 	adc.w	r9, r3, r5
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	469a      	mov	sl, r3
 800369c:	4693      	mov	fp, r2
 800369e:	4652      	mov	r2, sl
 80036a0:	465b      	mov	r3, fp
 80036a2:	4640      	mov	r0, r8
 80036a4:	4649      	mov	r1, r9
 80036a6:	f7fc fe13 	bl	80002d0 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4613      	mov	r3, r2
 80036b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b8:	d308      	bcc.n	80036cc <UART_SetConfig+0x430>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c0:	d204      	bcs.n	80036cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e0ce      	b.n	800386a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036d2:	e0ca      	b.n	800386a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	d166      	bne.n	80037ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80036de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d827      	bhi.n	8003736 <UART_SetConfig+0x49a>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x450>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003737 	.word	0x08003737
 80036fc:	08003727 	.word	0x08003727
 8003700:	08003737 	.word	0x08003737
 8003704:	08003737 	.word	0x08003737
 8003708:	08003737 	.word	0x08003737
 800370c:	0800372f 	.word	0x0800372f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7fe fe90 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003716:	e014      	b.n	8003742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fea2 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 800371c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800371e:	e010      	b.n	8003742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003720:	4b4e      	ldr	r3, [pc, #312]	; (800385c <UART_SetConfig+0x5c0>)
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003724:	e00d      	b.n	8003742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003726:	f7fe fe17 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800372a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800372c:	e009      	b.n	8003742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003734:	e005      	b.n	8003742 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8090 	beq.w	800386a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	4a44      	ldr	r2, [pc, #272]	; (8003860 <UART_SetConfig+0x5c4>)
 8003750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003754:	461a      	mov	r2, r3
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	fbb3 f3f2 	udiv	r3, r3, r2
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	441a      	add	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d916      	bls.n	80037a4 <UART_SetConfig+0x508>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d212      	bcs.n	80037a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f023 030f 	bic.w	r3, r3, #15
 8003786:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	b29b      	uxth	r3, r3
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	b29a      	uxth	r2, r3
 8003794:	8bfb      	ldrh	r3, [r7, #30]
 8003796:	4313      	orrs	r3, r2
 8003798:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	8bfa      	ldrh	r2, [r7, #30]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e062      	b.n	800386a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037aa:	e05e      	b.n	800386a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d828      	bhi.n	8003806 <UART_SetConfig+0x56a>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x520>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e9 	.word	0x080037e9
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	08003807 	.word	0x08003807
 80037d4:	08003807 	.word	0x08003807
 80037d8:	08003807 	.word	0x08003807
 80037dc:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe fe28 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037e6:	e014      	b.n	8003812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fe3a 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037ee:	e010      	b.n	8003812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <UART_SetConfig+0x5c0>)
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037f4:	e00d      	b.n	8003812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fdaf 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 80037fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037fc:	e009      	b.n	8003812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003810:	bf00      	nop
    }

    if (pclk != 0U)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d028      	beq.n	800386a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	4a10      	ldr	r2, [pc, #64]	; (8003860 <UART_SetConfig+0x5c4>)
 800381e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003822:	461a      	mov	r2, r3
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	fbb3 f2f2 	udiv	r2, r3, r2
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	441a      	add	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d910      	bls.n	8003864 <UART_SetConfig+0x5c8>
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d20c      	bcs.n	8003864 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	b29a      	uxth	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e009      	b.n	800386a <UART_SetConfig+0x5ce>
 8003856:	bf00      	nop
 8003858:	40008000 	.word	0x40008000
 800385c:	00f42400 	.word	0x00f42400
 8003860:	08004da8 	.word	0x08004da8
      }
      else
      {
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2201      	movs	r2, #1
 800386e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2201      	movs	r2, #1
 8003876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003886:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d10a      	bne.n	80039aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b098      	sub	sp, #96	; 0x60
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e8:	f7fd f98e 	bl	8000d08 <HAL_GetTick>
 80039ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d12f      	bne.n	8003a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a04:	2200      	movs	r2, #0
 8003a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f88e 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d022      	beq.n	8003a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
 8003a36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e6      	bne.n	8003a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e063      	b.n	8003b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d149      	bne.n	8003afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	2200      	movs	r2, #0
 8003a74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f857 	bl	8003b2c <UART_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d03c      	beq.n	8003afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	623b      	str	r3, [r7, #32]
   return(result);
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e6      	bne.n	8003a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad6:	61fa      	str	r2, [r7, #28]
 8003ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e012      	b.n	8003b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3758      	adds	r7, #88	; 0x58
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	e04f      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d04b      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd f8df 	bl	8000d08 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e04e      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d037      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d034      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d031      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d110      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f920 	bl	8003dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e029      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	d111      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f906 	bl	8003dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e00f      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d0a0      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b096      	sub	sp, #88	; 0x58
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2222      	movs	r2, #34	; 0x22
 8003c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02d      	beq.n	8003c9a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c44:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <UART_Start_Receive_DMA+0x140>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4e:	4a3f      	ldr	r2, [pc, #252]	; (8003d4c <UART_Start_Receive_DMA+0x144>)
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c58:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <UART_Start_Receive_DMA+0x148>)
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	2200      	movs	r2, #0
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3324      	adds	r3, #36	; 0x24
 8003c72:	4619      	mov	r1, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	461a      	mov	r2, r3
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	f7fd fa08 	bl	8001090 <HAL_DMA_Start_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e051      	b.n	8003d3e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cf4:	637a      	str	r2, [r7, #52]	; 0x34
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	613b      	str	r3, [r7, #16]
   return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d28:	623a      	str	r2, [r7, #32]
 8003d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69f9      	ldr	r1, [r7, #28]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3758      	adds	r7, #88	; 0x58
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	08003f59 	.word	0x08003f59
 8003d4c:	08004085 	.word	0x08004085
 8003d50:	080040c3 	.word	0x080040c3

08003d54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08f      	sub	sp, #60	; 0x3c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	61ba      	str	r2, [r7, #24]
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003dca:	bf00      	nop
 8003dcc:	373c      	adds	r7, #60	; 0x3c
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b095      	sub	sp, #84	; 0x54
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e6      	bne.n	8003dde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e3      	bne.n	8003e10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d118      	bne.n	8003e82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f023 0310 	bic.w	r3, r3, #16
 8003e64:	647b      	str	r3, [r7, #68]	; 0x44
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e6      	bne.n	8003e50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e96:	bf00      	nop
 8003e98:	3754      	adds	r7, #84	; 0x54
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b090      	sub	sp, #64	; 0x40
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d137      	bne.n	8003f2e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	617b      	str	r3, [r7, #20]
   return(result);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f2c:	e002      	b.n	8003f34 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f30:	f7ff f980 	bl	8003234 <HAL_UART_TxCpltCallback>
}
 8003f34:	bf00      	nop
 8003f36:	3740      	adds	r7, #64	; 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff f97c 	bl	8003248 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b09c      	sub	sp, #112	; 0x70
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d171      	bne.n	8004058 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fce:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d118      	bne.n	8004058 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60fb      	str	r3, [r7, #12]
   return(result);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	617b      	str	r3, [r7, #20]
   return(result);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	2200      	movs	r2, #0
 800405c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800406c:	4619      	mov	r1, r3
 800406e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004070:	f7ff f908 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004074:	e002      	b.n	800407c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004078:	f7fc fc14 	bl	80008a4 <HAL_UART_RxCpltCallback>
}
 800407c:	bf00      	nop
 800407e:	3770      	adds	r7, #112	; 0x70
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d109      	bne.n	80040b4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff f8e9 	bl	8003284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040b2:	e002      	b.n	80040ba <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff f8d1 	bl	800325c <HAL_UART_RxHalfCpltCallback>
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d109      	bne.n	8004102 <UART_DMAError+0x40>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d106      	bne.n	8004102 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	f7ff fe29 	bl	8003d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d109      	bne.n	8004124 <UART_DMAError+0x62>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b22      	cmp	r3, #34	; 0x22
 8004114:	d106      	bne.n	8004124 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff fe59 	bl	8003dd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f043 0210 	orr.w	r2, r3, #16
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f7ff f89b 	bl	8003270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff f885 	bl	8003270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60bb      	str	r3, [r7, #8]
   return(result);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff f83c 	bl	8003234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041bc:	bf00      	nop
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UARTEx_DisableFifoMode+0x16>
 8004212:	2302      	movs	r3, #2
 8004214:	e027      	b.n	8004266 <HAL_UARTEx_DisableFifoMode+0x66>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2224      	movs	r2, #36	; 0x24
 8004222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004244:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004286:	2302      	movs	r3, #2
 8004288:	e02d      	b.n	80042e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f850 	bl	800436c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004302:	2302      	movs	r3, #2
 8004304:	e02d      	b.n	8004362 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2224      	movs	r2, #36	; 0x24
 8004312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f812 	bl	800436c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800438c:	e031      	b.n	80043f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800438e:	2308      	movs	r3, #8
 8004390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004392:	2308      	movs	r3, #8
 8004394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	0e5b      	lsrs	r3, r3, #25
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	0f5b      	lsrs	r3, r3, #29
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043b6:	7bbb      	ldrb	r3, [r7, #14]
 80043b8:	7b3a      	ldrb	r2, [r7, #12]
 80043ba:	4911      	ldr	r1, [pc, #68]	; (8004400 <UARTEx_SetNbDataToProcess+0x94>)
 80043bc:	5c8a      	ldrb	r2, [r1, r2]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043c2:	7b3a      	ldrb	r2, [r7, #12]
 80043c4:	490f      	ldr	r1, [pc, #60]	; (8004404 <UARTEx_SetNbDataToProcess+0x98>)
 80043c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	7b7a      	ldrb	r2, [r7, #13]
 80043d8:	4909      	ldr	r1, [pc, #36]	; (8004400 <UARTEx_SetNbDataToProcess+0x94>)
 80043da:	5c8a      	ldrb	r2, [r1, r2]
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e0:	7b7a      	ldrb	r2, [r7, #13]
 80043e2:	4908      	ldr	r1, [pc, #32]	; (8004404 <UARTEx_SetNbDataToProcess+0x98>)
 80043e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	08004dc0 	.word	0x08004dc0
 8004404:	08004dc8 	.word	0x08004dc8

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	; 0x70
 800440e:	ab1d      	add	r3, sp, #116	; 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	; (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f000 f992 	bl	8004754 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	; 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000058 	.word	0x20000058
 8004444:	ffff0208 	.word	0xffff0208

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	; (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000058 	.word	0x20000058

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4d0d      	ldr	r5, [pc, #52]	; (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	; (80044a0 <__libc_init_array+0x3c>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2600      	movs	r6, #0
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4d0b      	ldr	r5, [pc, #44]	; (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	; (80044a8 <__libc_init_array+0x44>)
 8004478:	f000 fc6a 	bl	8004d50 <_init>
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2600      	movs	r6, #0
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08004e0c 	.word	0x08004e0c
 80044a0:	08004e0c 	.word	0x08004e0c
 80044a4:	08004e0c 	.word	0x08004e0c
 80044a8:	08004e10 	.word	0x08004e10

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <_free_r>:
 80044b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044b2:	2900      	cmp	r1, #0
 80044b4:	d044      	beq.n	8004540 <_free_r+0x90>
 80044b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ba:	9001      	str	r0, [sp, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f1a1 0404 	sub.w	r4, r1, #4
 80044c2:	bfb8      	it	lt
 80044c4:	18e4      	addlt	r4, r4, r3
 80044c6:	f000 f8df 	bl	8004688 <__malloc_lock>
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <_free_r+0x94>)
 80044cc:	9801      	ldr	r0, [sp, #4]
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	b933      	cbnz	r3, 80044e0 <_free_r+0x30>
 80044d2:	6063      	str	r3, [r4, #4]
 80044d4:	6014      	str	r4, [r2, #0]
 80044d6:	b003      	add	sp, #12
 80044d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044dc:	f000 b8da 	b.w	8004694 <__malloc_unlock>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d908      	bls.n	80044f6 <_free_r+0x46>
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	1961      	adds	r1, r4, r5
 80044e8:	428b      	cmp	r3, r1
 80044ea:	bf01      	itttt	eq
 80044ec:	6819      	ldreq	r1, [r3, #0]
 80044ee:	685b      	ldreq	r3, [r3, #4]
 80044f0:	1949      	addeq	r1, r1, r5
 80044f2:	6021      	streq	r1, [r4, #0]
 80044f4:	e7ed      	b.n	80044d2 <_free_r+0x22>
 80044f6:	461a      	mov	r2, r3
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b10b      	cbz	r3, 8004500 <_free_r+0x50>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d9fa      	bls.n	80044f6 <_free_r+0x46>
 8004500:	6811      	ldr	r1, [r2, #0]
 8004502:	1855      	adds	r5, r2, r1
 8004504:	42a5      	cmp	r5, r4
 8004506:	d10b      	bne.n	8004520 <_free_r+0x70>
 8004508:	6824      	ldr	r4, [r4, #0]
 800450a:	4421      	add	r1, r4
 800450c:	1854      	adds	r4, r2, r1
 800450e:	42a3      	cmp	r3, r4
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	d1e0      	bne.n	80044d6 <_free_r+0x26>
 8004514:	681c      	ldr	r4, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6053      	str	r3, [r2, #4]
 800451a:	440c      	add	r4, r1
 800451c:	6014      	str	r4, [r2, #0]
 800451e:	e7da      	b.n	80044d6 <_free_r+0x26>
 8004520:	d902      	bls.n	8004528 <_free_r+0x78>
 8004522:	230c      	movs	r3, #12
 8004524:	6003      	str	r3, [r0, #0]
 8004526:	e7d6      	b.n	80044d6 <_free_r+0x26>
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1961      	adds	r1, r4, r5
 800452c:	428b      	cmp	r3, r1
 800452e:	bf04      	itt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	bf04      	itt	eq
 8004538:	1949      	addeq	r1, r1, r5
 800453a:	6021      	streq	r1, [r4, #0]
 800453c:	6054      	str	r4, [r2, #4]
 800453e:	e7ca      	b.n	80044d6 <_free_r+0x26>
 8004540:	b003      	add	sp, #12
 8004542:	bd30      	pop	{r4, r5, pc}
 8004544:	20000354 	.word	0x20000354

08004548 <sbrk_aligned>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4e0e      	ldr	r6, [pc, #56]	; (8004584 <sbrk_aligned+0x3c>)
 800454c:	460c      	mov	r4, r1
 800454e:	6831      	ldr	r1, [r6, #0]
 8004550:	4605      	mov	r5, r0
 8004552:	b911      	cbnz	r1, 800455a <sbrk_aligned+0x12>
 8004554:	f000 fba6 	bl	8004ca4 <_sbrk_r>
 8004558:	6030      	str	r0, [r6, #0]
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 fba1 	bl	8004ca4 <_sbrk_r>
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	d00a      	beq.n	800457c <sbrk_aligned+0x34>
 8004566:	1cc4      	adds	r4, r0, #3
 8004568:	f024 0403 	bic.w	r4, r4, #3
 800456c:	42a0      	cmp	r0, r4
 800456e:	d007      	beq.n	8004580 <sbrk_aligned+0x38>
 8004570:	1a21      	subs	r1, r4, r0
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fb96 	bl	8004ca4 <_sbrk_r>
 8004578:	3001      	adds	r0, #1
 800457a:	d101      	bne.n	8004580 <sbrk_aligned+0x38>
 800457c:	f04f 34ff 	mov.w	r4, #4294967295
 8004580:	4620      	mov	r0, r4
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	20000358 	.word	0x20000358

08004588 <_malloc_r>:
 8004588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800458c:	1ccd      	adds	r5, r1, #3
 800458e:	f025 0503 	bic.w	r5, r5, #3
 8004592:	3508      	adds	r5, #8
 8004594:	2d0c      	cmp	r5, #12
 8004596:	bf38      	it	cc
 8004598:	250c      	movcc	r5, #12
 800459a:	2d00      	cmp	r5, #0
 800459c:	4607      	mov	r7, r0
 800459e:	db01      	blt.n	80045a4 <_malloc_r+0x1c>
 80045a0:	42a9      	cmp	r1, r5
 80045a2:	d905      	bls.n	80045b0 <_malloc_r+0x28>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	2600      	movs	r6, #0
 80045aa:	4630      	mov	r0, r6
 80045ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004684 <_malloc_r+0xfc>
 80045b4:	f000 f868 	bl	8004688 <__malloc_lock>
 80045b8:	f8d8 3000 	ldr.w	r3, [r8]
 80045bc:	461c      	mov	r4, r3
 80045be:	bb5c      	cbnz	r4, 8004618 <_malloc_r+0x90>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4638      	mov	r0, r7
 80045c4:	f7ff ffc0 	bl	8004548 <sbrk_aligned>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	4604      	mov	r4, r0
 80045cc:	d155      	bne.n	800467a <_malloc_r+0xf2>
 80045ce:	f8d8 4000 	ldr.w	r4, [r8]
 80045d2:	4626      	mov	r6, r4
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	d145      	bne.n	8004664 <_malloc_r+0xdc>
 80045d8:	2c00      	cmp	r4, #0
 80045da:	d048      	beq.n	800466e <_malloc_r+0xe6>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	4631      	mov	r1, r6
 80045e0:	4638      	mov	r0, r7
 80045e2:	eb04 0903 	add.w	r9, r4, r3
 80045e6:	f000 fb5d 	bl	8004ca4 <_sbrk_r>
 80045ea:	4581      	cmp	r9, r0
 80045ec:	d13f      	bne.n	800466e <_malloc_r+0xe6>
 80045ee:	6821      	ldr	r1, [r4, #0]
 80045f0:	1a6d      	subs	r5, r5, r1
 80045f2:	4629      	mov	r1, r5
 80045f4:	4638      	mov	r0, r7
 80045f6:	f7ff ffa7 	bl	8004548 <sbrk_aligned>
 80045fa:	3001      	adds	r0, #1
 80045fc:	d037      	beq.n	800466e <_malloc_r+0xe6>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	442b      	add	r3, r5
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	f8d8 3000 	ldr.w	r3, [r8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d038      	beq.n	800467e <_malloc_r+0xf6>
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	42a2      	cmp	r2, r4
 8004610:	d12b      	bne.n	800466a <_malloc_r+0xe2>
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	e00f      	b.n	8004638 <_malloc_r+0xb0>
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	1b52      	subs	r2, r2, r5
 800461c:	d41f      	bmi.n	800465e <_malloc_r+0xd6>
 800461e:	2a0b      	cmp	r2, #11
 8004620:	d917      	bls.n	8004652 <_malloc_r+0xca>
 8004622:	1961      	adds	r1, r4, r5
 8004624:	42a3      	cmp	r3, r4
 8004626:	6025      	str	r5, [r4, #0]
 8004628:	bf18      	it	ne
 800462a:	6059      	strne	r1, [r3, #4]
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	bf08      	it	eq
 8004630:	f8c8 1000 	streq.w	r1, [r8]
 8004634:	5162      	str	r2, [r4, r5]
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	4638      	mov	r0, r7
 800463a:	f104 060b 	add.w	r6, r4, #11
 800463e:	f000 f829 	bl	8004694 <__malloc_unlock>
 8004642:	f026 0607 	bic.w	r6, r6, #7
 8004646:	1d23      	adds	r3, r4, #4
 8004648:	1af2      	subs	r2, r6, r3
 800464a:	d0ae      	beq.n	80045aa <_malloc_r+0x22>
 800464c:	1b9b      	subs	r3, r3, r6
 800464e:	50a3      	str	r3, [r4, r2]
 8004650:	e7ab      	b.n	80045aa <_malloc_r+0x22>
 8004652:	42a3      	cmp	r3, r4
 8004654:	6862      	ldr	r2, [r4, #4]
 8004656:	d1dd      	bne.n	8004614 <_malloc_r+0x8c>
 8004658:	f8c8 2000 	str.w	r2, [r8]
 800465c:	e7ec      	b.n	8004638 <_malloc_r+0xb0>
 800465e:	4623      	mov	r3, r4
 8004660:	6864      	ldr	r4, [r4, #4]
 8004662:	e7ac      	b.n	80045be <_malloc_r+0x36>
 8004664:	4634      	mov	r4, r6
 8004666:	6876      	ldr	r6, [r6, #4]
 8004668:	e7b4      	b.n	80045d4 <_malloc_r+0x4c>
 800466a:	4613      	mov	r3, r2
 800466c:	e7cc      	b.n	8004608 <_malloc_r+0x80>
 800466e:	230c      	movs	r3, #12
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4638      	mov	r0, r7
 8004674:	f000 f80e 	bl	8004694 <__malloc_unlock>
 8004678:	e797      	b.n	80045aa <_malloc_r+0x22>
 800467a:	6025      	str	r5, [r4, #0]
 800467c:	e7dc      	b.n	8004638 <_malloc_r+0xb0>
 800467e:	605b      	str	r3, [r3, #4]
 8004680:	deff      	udf	#255	; 0xff
 8004682:	bf00      	nop
 8004684:	20000354 	.word	0x20000354

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__malloc_lock+0x8>)
 800468a:	f7ff bf0f 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000350 	.word	0x20000350

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__malloc_unlock+0x8>)
 8004696:	f7ff bf0a 	b.w	80044ae <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000350 	.word	0x20000350

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	688e      	ldr	r6, [r1, #8]
 80046a6:	461f      	mov	r7, r3
 80046a8:	42be      	cmp	r6, r7
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	4682      	mov	sl, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	4690      	mov	r8, r2
 80046b2:	d82c      	bhi.n	800470e <__ssputs_r+0x6e>
 80046b4:	898a      	ldrh	r2, [r1, #12]
 80046b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ba:	d026      	beq.n	800470a <__ssputs_r+0x6a>
 80046bc:	6965      	ldr	r5, [r4, #20]
 80046be:	6909      	ldr	r1, [r1, #16]
 80046c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c4:	eba3 0901 	sub.w	r9, r3, r1
 80046c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046cc:	1c7b      	adds	r3, r7, #1
 80046ce:	444b      	add	r3, r9
 80046d0:	106d      	asrs	r5, r5, #1
 80046d2:	429d      	cmp	r5, r3
 80046d4:	bf38      	it	cc
 80046d6:	461d      	movcc	r5, r3
 80046d8:	0553      	lsls	r3, r2, #21
 80046da:	d527      	bpl.n	800472c <__ssputs_r+0x8c>
 80046dc:	4629      	mov	r1, r5
 80046de:	f7ff ff53 	bl	8004588 <_malloc_r>
 80046e2:	4606      	mov	r6, r0
 80046e4:	b360      	cbz	r0, 8004740 <__ssputs_r+0xa0>
 80046e6:	6921      	ldr	r1, [r4, #16]
 80046e8:	464a      	mov	r2, r9
 80046ea:	f000 faeb 	bl	8004cc4 <memcpy>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	6126      	str	r6, [r4, #16]
 80046fc:	6165      	str	r5, [r4, #20]
 80046fe:	444e      	add	r6, r9
 8004700:	eba5 0509 	sub.w	r5, r5, r9
 8004704:	6026      	str	r6, [r4, #0]
 8004706:	60a5      	str	r5, [r4, #8]
 8004708:	463e      	mov	r6, r7
 800470a:	42be      	cmp	r6, r7
 800470c:	d900      	bls.n	8004710 <__ssputs_r+0x70>
 800470e:	463e      	mov	r6, r7
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	4632      	mov	r2, r6
 8004714:	4641      	mov	r1, r8
 8004716:	f000 faab 	bl	8004c70 <memmove>
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	1b9b      	subs	r3, r3, r6
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	4433      	add	r3, r6
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	2000      	movs	r0, #0
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	462a      	mov	r2, r5
 800472e:	f000 fad7 	bl	8004ce0 <_realloc_r>
 8004732:	4606      	mov	r6, r0
 8004734:	2800      	cmp	r0, #0
 8004736:	d1e0      	bne.n	80046fa <__ssputs_r+0x5a>
 8004738:	6921      	ldr	r1, [r4, #16]
 800473a:	4650      	mov	r0, sl
 800473c:	f7ff feb8 	bl	80044b0 <_free_r>
 8004740:	230c      	movs	r3, #12
 8004742:	f8ca 3000 	str.w	r3, [sl]
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	e7e9      	b.n	8004728 <__ssputs_r+0x88>

08004754 <_svfiprintf_r>:
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	4698      	mov	r8, r3
 800475a:	898b      	ldrh	r3, [r1, #12]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	b09d      	sub	sp, #116	; 0x74
 8004760:	4607      	mov	r7, r0
 8004762:	460d      	mov	r5, r1
 8004764:	4614      	mov	r4, r2
 8004766:	d50e      	bpl.n	8004786 <_svfiprintf_r+0x32>
 8004768:	690b      	ldr	r3, [r1, #16]
 800476a:	b963      	cbnz	r3, 8004786 <_svfiprintf_r+0x32>
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	f7ff ff0b 	bl	8004588 <_malloc_r>
 8004772:	6028      	str	r0, [r5, #0]
 8004774:	6128      	str	r0, [r5, #16]
 8004776:	b920      	cbnz	r0, 8004782 <_svfiprintf_r+0x2e>
 8004778:	230c      	movs	r3, #12
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	e0d0      	b.n	8004924 <_svfiprintf_r+0x1d0>
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	616b      	str	r3, [r5, #20]
 8004786:	2300      	movs	r3, #0
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
 800478a:	2320      	movs	r3, #32
 800478c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004790:	f8cd 800c 	str.w	r8, [sp, #12]
 8004794:	2330      	movs	r3, #48	; 0x30
 8004796:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800493c <_svfiprintf_r+0x1e8>
 800479a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800479e:	f04f 0901 	mov.w	r9, #1
 80047a2:	4623      	mov	r3, r4
 80047a4:	469a      	mov	sl, r3
 80047a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047aa:	b10a      	cbz	r2, 80047b0 <_svfiprintf_r+0x5c>
 80047ac:	2a25      	cmp	r2, #37	; 0x25
 80047ae:	d1f9      	bne.n	80047a4 <_svfiprintf_r+0x50>
 80047b0:	ebba 0b04 	subs.w	fp, sl, r4
 80047b4:	d00b      	beq.n	80047ce <_svfiprintf_r+0x7a>
 80047b6:	465b      	mov	r3, fp
 80047b8:	4622      	mov	r2, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff ff6f 	bl	80046a0 <__ssputs_r>
 80047c2:	3001      	adds	r0, #1
 80047c4:	f000 80a9 	beq.w	800491a <_svfiprintf_r+0x1c6>
 80047c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ca:	445a      	add	r2, fp
 80047cc:	9209      	str	r2, [sp, #36]	; 0x24
 80047ce:	f89a 3000 	ldrb.w	r3, [sl]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80a1 	beq.w	800491a <_svfiprintf_r+0x1c6>
 80047d8:	2300      	movs	r3, #0
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e2:	f10a 0a01 	add.w	sl, sl, #1
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	9307      	str	r3, [sp, #28]
 80047ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047ee:	931a      	str	r3, [sp, #104]	; 0x68
 80047f0:	4654      	mov	r4, sl
 80047f2:	2205      	movs	r2, #5
 80047f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f8:	4850      	ldr	r0, [pc, #320]	; (800493c <_svfiprintf_r+0x1e8>)
 80047fa:	f7fb fd19 	bl	8000230 <memchr>
 80047fe:	9a04      	ldr	r2, [sp, #16]
 8004800:	b9d8      	cbnz	r0, 800483a <_svfiprintf_r+0xe6>
 8004802:	06d0      	lsls	r0, r2, #27
 8004804:	bf44      	itt	mi
 8004806:	2320      	movmi	r3, #32
 8004808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800480c:	0711      	lsls	r1, r2, #28
 800480e:	bf44      	itt	mi
 8004810:	232b      	movmi	r3, #43	; 0x2b
 8004812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004816:	f89a 3000 	ldrb.w	r3, [sl]
 800481a:	2b2a      	cmp	r3, #42	; 0x2a
 800481c:	d015      	beq.n	800484a <_svfiprintf_r+0xf6>
 800481e:	9a07      	ldr	r2, [sp, #28]
 8004820:	4654      	mov	r4, sl
 8004822:	2000      	movs	r0, #0
 8004824:	f04f 0c0a 	mov.w	ip, #10
 8004828:	4621      	mov	r1, r4
 800482a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800482e:	3b30      	subs	r3, #48	; 0x30
 8004830:	2b09      	cmp	r3, #9
 8004832:	d94d      	bls.n	80048d0 <_svfiprintf_r+0x17c>
 8004834:	b1b0      	cbz	r0, 8004864 <_svfiprintf_r+0x110>
 8004836:	9207      	str	r2, [sp, #28]
 8004838:	e014      	b.n	8004864 <_svfiprintf_r+0x110>
 800483a:	eba0 0308 	sub.w	r3, r0, r8
 800483e:	fa09 f303 	lsl.w	r3, r9, r3
 8004842:	4313      	orrs	r3, r2
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	46a2      	mov	sl, r4
 8004848:	e7d2      	b.n	80047f0 <_svfiprintf_r+0x9c>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	9103      	str	r1, [sp, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfbb      	ittet	lt
 8004856:	425b      	neglt	r3, r3
 8004858:	f042 0202 	orrlt.w	r2, r2, #2
 800485c:	9307      	strge	r3, [sp, #28]
 800485e:	9307      	strlt	r3, [sp, #28]
 8004860:	bfb8      	it	lt
 8004862:	9204      	strlt	r2, [sp, #16]
 8004864:	7823      	ldrb	r3, [r4, #0]
 8004866:	2b2e      	cmp	r3, #46	; 0x2e
 8004868:	d10c      	bne.n	8004884 <_svfiprintf_r+0x130>
 800486a:	7863      	ldrb	r3, [r4, #1]
 800486c:	2b2a      	cmp	r3, #42	; 0x2a
 800486e:	d134      	bne.n	80048da <_svfiprintf_r+0x186>
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	1d1a      	adds	r2, r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	9203      	str	r2, [sp, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	bfb8      	it	lt
 800487c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004880:	3402      	adds	r4, #2
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800494c <_svfiprintf_r+0x1f8>
 8004888:	7821      	ldrb	r1, [r4, #0]
 800488a:	2203      	movs	r2, #3
 800488c:	4650      	mov	r0, sl
 800488e:	f7fb fccf 	bl	8000230 <memchr>
 8004892:	b138      	cbz	r0, 80048a4 <_svfiprintf_r+0x150>
 8004894:	9b04      	ldr	r3, [sp, #16]
 8004896:	eba0 000a 	sub.w	r0, r0, sl
 800489a:	2240      	movs	r2, #64	; 0x40
 800489c:	4082      	lsls	r2, r0
 800489e:	4313      	orrs	r3, r2
 80048a0:	3401      	adds	r4, #1
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a8:	4825      	ldr	r0, [pc, #148]	; (8004940 <_svfiprintf_r+0x1ec>)
 80048aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ae:	2206      	movs	r2, #6
 80048b0:	f7fb fcbe 	bl	8000230 <memchr>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d038      	beq.n	800492a <_svfiprintf_r+0x1d6>
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <_svfiprintf_r+0x1f0>)
 80048ba:	bb1b      	cbnz	r3, 8004904 <_svfiprintf_r+0x1b0>
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	3307      	adds	r3, #7
 80048c0:	f023 0307 	bic.w	r3, r3, #7
 80048c4:	3308      	adds	r3, #8
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ca:	4433      	add	r3, r6
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	e768      	b.n	80047a2 <_svfiprintf_r+0x4e>
 80048d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d4:	460c      	mov	r4, r1
 80048d6:	2001      	movs	r0, #1
 80048d8:	e7a6      	b.n	8004828 <_svfiprintf_r+0xd4>
 80048da:	2300      	movs	r3, #0
 80048dc:	3401      	adds	r4, #1
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	4620      	mov	r0, r4
 80048e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ec:	3a30      	subs	r2, #48	; 0x30
 80048ee:	2a09      	cmp	r2, #9
 80048f0:	d903      	bls.n	80048fa <_svfiprintf_r+0x1a6>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0c6      	beq.n	8004884 <_svfiprintf_r+0x130>
 80048f6:	9105      	str	r1, [sp, #20]
 80048f8:	e7c4      	b.n	8004884 <_svfiprintf_r+0x130>
 80048fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80048fe:	4604      	mov	r4, r0
 8004900:	2301      	movs	r3, #1
 8004902:	e7f0      	b.n	80048e6 <_svfiprintf_r+0x192>
 8004904:	ab03      	add	r3, sp, #12
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	462a      	mov	r2, r5
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <_svfiprintf_r+0x1f4>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	4638      	mov	r0, r7
 8004910:	f3af 8000 	nop.w
 8004914:	1c42      	adds	r2, r0, #1
 8004916:	4606      	mov	r6, r0
 8004918:	d1d6      	bne.n	80048c8 <_svfiprintf_r+0x174>
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	065b      	lsls	r3, r3, #25
 800491e:	f53f af2d 	bmi.w	800477c <_svfiprintf_r+0x28>
 8004922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004924:	b01d      	add	sp, #116	; 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_svfiprintf_r+0x1f4>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	4638      	mov	r0, r7
 8004936:	f000 f879 	bl	8004a2c <_printf_i>
 800493a:	e7eb      	b.n	8004914 <_svfiprintf_r+0x1c0>
 800493c:	08004dd0 	.word	0x08004dd0
 8004940:	08004dda 	.word	0x08004dda
 8004944:	00000000 	.word	0x00000000
 8004948:	080046a1 	.word	0x080046a1
 800494c:	08004dd6 	.word	0x08004dd6

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4699      	mov	r9, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004960:	4293      	cmp	r3, r2
 8004962:	bfb8      	it	lt
 8004964:	4613      	movlt	r3, r2
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800496c:	4607      	mov	r7, r0
 800496e:	460c      	mov	r4, r1
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc26      	bgt.n	80049e6 <_printf_common+0x96>
 8004998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800499c:	1e13      	subs	r3, r2, #0
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d42b      	bmi.n	8004a00 <_printf_common+0xb0>
 80049a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ac:	4649      	mov	r1, r9
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d01e      	beq.n	80049f4 <_printf_common+0xa4>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf02      	ittt	eq
 80049c2:	68e5      	ldreq	r5, [r4, #12]
 80049c4:	6833      	ldreq	r3, [r6, #0]
 80049c6:	1aed      	subeq	r5, r5, r3
 80049c8:	68a3      	ldr	r3, [r4, #8]
 80049ca:	bf0c      	ite	eq
 80049cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d0:	2500      	movne	r5, #0
 80049d2:	4293      	cmp	r3, r2
 80049d4:	bfc4      	itt	gt
 80049d6:	1a9b      	subgt	r3, r3, r2
 80049d8:	18ed      	addgt	r5, r5, r3
 80049da:	2600      	movs	r6, #0
 80049dc:	341a      	adds	r4, #26
 80049de:	42b5      	cmp	r5, r6
 80049e0:	d11a      	bne.n	8004a18 <_printf_common+0xc8>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e008      	b.n	80049f8 <_printf_common+0xa8>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4652      	mov	r2, sl
 80049ea:	4649      	mov	r1, r9
 80049ec:	4638      	mov	r0, r7
 80049ee:	47c0      	blx	r8
 80049f0:	3001      	adds	r0, #1
 80049f2:	d103      	bne.n	80049fc <_printf_common+0xac>
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	3501      	adds	r5, #1
 80049fe:	e7c6      	b.n	800498e <_printf_common+0x3e>
 8004a00:	18e1      	adds	r1, r4, r3
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	2030      	movs	r0, #48	; 0x30
 8004a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a0a:	4422      	add	r2, r4
 8004a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a14:	3302      	adds	r3, #2
 8004a16:	e7c7      	b.n	80049a8 <_printf_common+0x58>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0e6      	beq.n	80049f4 <_printf_common+0xa4>
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7d9      	b.n	80049de <_printf_common+0x8e>
	...

08004a2c <_printf_i>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	7e0f      	ldrb	r7, [r1, #24]
 8004a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a34:	2f78      	cmp	r7, #120	; 0x78
 8004a36:	4691      	mov	r9, r2
 8004a38:	4680      	mov	r8, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	469a      	mov	sl, r3
 8004a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a42:	d807      	bhi.n	8004a54 <_printf_i+0x28>
 8004a44:	2f62      	cmp	r7, #98	; 0x62
 8004a46:	d80a      	bhi.n	8004a5e <_printf_i+0x32>
 8004a48:	2f00      	cmp	r7, #0
 8004a4a:	f000 80d4 	beq.w	8004bf6 <_printf_i+0x1ca>
 8004a4e:	2f58      	cmp	r7, #88	; 0x58
 8004a50:	f000 80c0 	beq.w	8004bd4 <_printf_i+0x1a8>
 8004a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a5c:	e03a      	b.n	8004ad4 <_printf_i+0xa8>
 8004a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d8f6      	bhi.n	8004a54 <_printf_i+0x28>
 8004a66:	a101      	add	r1, pc, #4	; (adr r1, 8004a6c <_printf_i+0x40>)
 8004a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004a55 	.word	0x08004a55
 8004a78:	08004a55 	.word	0x08004a55
 8004a7c:	08004a55 	.word	0x08004a55
 8004a80:	08004a55 	.word	0x08004a55
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004a55 	.word	0x08004a55
 8004a8c:	08004a55 	.word	0x08004a55
 8004a90:	08004a55 	.word	0x08004a55
 8004a94:	08004a55 	.word	0x08004a55
 8004a98:	08004bdd 	.word	0x08004bdd
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004b97 	.word	0x08004b97
 8004aa4:	08004a55 	.word	0x08004a55
 8004aa8:	08004a55 	.word	0x08004a55
 8004aac:	08004bff 	.word	0x08004bff
 8004ab0:	08004a55 	.word	0x08004a55
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004a55 	.word	0x08004a55
 8004abc:	08004a55 	.word	0x08004a55
 8004ac0:	08004b9f 	.word	0x08004b9f
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	602a      	str	r2, [r5, #0]
 8004acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e09f      	b.n	8004c18 <_printf_i+0x1ec>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	0607      	lsls	r7, r0, #24
 8004ade:	f103 0104 	add.w	r1, r3, #4
 8004ae2:	6029      	str	r1, [r5, #0]
 8004ae4:	d501      	bpl.n	8004aea <_printf_i+0xbe>
 8004ae6:	681e      	ldr	r6, [r3, #0]
 8004ae8:	e003      	b.n	8004af2 <_printf_i+0xc6>
 8004aea:	0646      	lsls	r6, r0, #25
 8004aec:	d5fb      	bpl.n	8004ae6 <_printf_i+0xba>
 8004aee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	da03      	bge.n	8004afe <_printf_i+0xd2>
 8004af6:	232d      	movs	r3, #45	; 0x2d
 8004af8:	4276      	negs	r6, r6
 8004afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004afe:	485a      	ldr	r0, [pc, #360]	; (8004c68 <_printf_i+0x23c>)
 8004b00:	230a      	movs	r3, #10
 8004b02:	e012      	b.n	8004b2a <_printf_i+0xfe>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	6029      	str	r1, [r5, #0]
 8004b0c:	0605      	lsls	r5, r0, #24
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0xe8>
 8004b10:	681e      	ldr	r6, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <_printf_i+0xee>
 8004b14:	0641      	lsls	r1, r0, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0xe4>
 8004b18:	881e      	ldrh	r6, [r3, #0]
 8004b1a:	4853      	ldr	r0, [pc, #332]	; (8004c68 <_printf_i+0x23c>)
 8004b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b1e:	bf0c      	ite	eq
 8004b20:	2308      	moveq	r3, #8
 8004b22:	230a      	movne	r3, #10
 8004b24:	2100      	movs	r1, #0
 8004b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2a:	6865      	ldr	r5, [r4, #4]
 8004b2c:	60a5      	str	r5, [r4, #8]
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	bfa2      	ittt	ge
 8004b32:	6821      	ldrge	r1, [r4, #0]
 8004b34:	f021 0104 	bicge.w	r1, r1, #4
 8004b38:	6021      	strge	r1, [r4, #0]
 8004b3a:	b90e      	cbnz	r6, 8004b40 <_printf_i+0x114>
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	d04b      	beq.n	8004bd8 <_printf_i+0x1ac>
 8004b40:	4615      	mov	r5, r2
 8004b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b46:	fb03 6711 	mls	r7, r3, r1, r6
 8004b4a:	5dc7      	ldrb	r7, [r0, r7]
 8004b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b50:	4637      	mov	r7, r6
 8004b52:	42bb      	cmp	r3, r7
 8004b54:	460e      	mov	r6, r1
 8004b56:	d9f4      	bls.n	8004b42 <_printf_i+0x116>
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d10b      	bne.n	8004b74 <_printf_i+0x148>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	07de      	lsls	r6, r3, #31
 8004b60:	d508      	bpl.n	8004b74 <_printf_i+0x148>
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	bfde      	ittt	le
 8004b6a:	2330      	movle	r3, #48	; 0x30
 8004b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b74:	1b52      	subs	r2, r2, r5
 8004b76:	6122      	str	r2, [r4, #16]
 8004b78:	f8cd a000 	str.w	sl, [sp]
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	aa03      	add	r2, sp, #12
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7ff fee4 	bl	8004950 <_printf_common>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d14a      	bne.n	8004c22 <_printf_i+0x1f6>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	b004      	add	sp, #16
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f043 0320 	orr.w	r3, r3, #32
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	4833      	ldr	r0, [pc, #204]	; (8004c6c <_printf_i+0x240>)
 8004ba0:	2778      	movs	r7, #120	; 0x78
 8004ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	6829      	ldr	r1, [r5, #0]
 8004baa:	061f      	lsls	r7, r3, #24
 8004bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bb0:	d402      	bmi.n	8004bb8 <_printf_i+0x18c>
 8004bb2:	065f      	lsls	r7, r3, #25
 8004bb4:	bf48      	it	mi
 8004bb6:	b2b6      	uxthmi	r6, r6
 8004bb8:	07df      	lsls	r7, r3, #31
 8004bba:	bf48      	it	mi
 8004bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc0:	6029      	str	r1, [r5, #0]
 8004bc2:	bf48      	it	mi
 8004bc4:	6023      	strmi	r3, [r4, #0]
 8004bc6:	b91e      	cbnz	r6, 8004bd0 <_printf_i+0x1a4>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	f023 0320 	bic.w	r3, r3, #32
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	e7a7      	b.n	8004b24 <_printf_i+0xf8>
 8004bd4:	4824      	ldr	r0, [pc, #144]	; (8004c68 <_printf_i+0x23c>)
 8004bd6:	e7e4      	b.n	8004ba2 <_printf_i+0x176>
 8004bd8:	4615      	mov	r5, r2
 8004bda:	e7bd      	b.n	8004b58 <_printf_i+0x12c>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	6826      	ldr	r6, [r4, #0]
 8004be0:	6961      	ldr	r1, [r4, #20]
 8004be2:	1d18      	adds	r0, r3, #4
 8004be4:	6028      	str	r0, [r5, #0]
 8004be6:	0635      	lsls	r5, r6, #24
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	d501      	bpl.n	8004bf0 <_printf_i+0x1c4>
 8004bec:	6019      	str	r1, [r3, #0]
 8004bee:	e002      	b.n	8004bf6 <_printf_i+0x1ca>
 8004bf0:	0670      	lsls	r0, r6, #25
 8004bf2:	d5fb      	bpl.n	8004bec <_printf_i+0x1c0>
 8004bf4:	8019      	strh	r1, [r3, #0]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6123      	str	r3, [r4, #16]
 8004bfa:	4615      	mov	r5, r2
 8004bfc:	e7bc      	b.n	8004b78 <_printf_i+0x14c>
 8004bfe:	682b      	ldr	r3, [r5, #0]
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	602a      	str	r2, [r5, #0]
 8004c04:	681d      	ldr	r5, [r3, #0]
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7fb fb10 	bl	8000230 <memchr>
 8004c10:	b108      	cbz	r0, 8004c16 <_printf_i+0x1ea>
 8004c12:	1b40      	subs	r0, r0, r5
 8004c14:	6060      	str	r0, [r4, #4]
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c20:	e7aa      	b.n	8004b78 <_printf_i+0x14c>
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	462a      	mov	r2, r5
 8004c26:	4649      	mov	r1, r9
 8004c28:	4640      	mov	r0, r8
 8004c2a:	47d0      	blx	sl
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d0ad      	beq.n	8004b8c <_printf_i+0x160>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	079b      	lsls	r3, r3, #30
 8004c34:	d413      	bmi.n	8004c5e <_printf_i+0x232>
 8004c36:	68e0      	ldr	r0, [r4, #12]
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	bfb8      	it	lt
 8004c3e:	4618      	movlt	r0, r3
 8004c40:	e7a6      	b.n	8004b90 <_printf_i+0x164>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4632      	mov	r2, r6
 8004c46:	4649      	mov	r1, r9
 8004c48:	4640      	mov	r0, r8
 8004c4a:	47d0      	blx	sl
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d09d      	beq.n	8004b8c <_printf_i+0x160>
 8004c50:	3501      	adds	r5, #1
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	9903      	ldr	r1, [sp, #12]
 8004c56:	1a5b      	subs	r3, r3, r1
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dcf2      	bgt.n	8004c42 <_printf_i+0x216>
 8004c5c:	e7eb      	b.n	8004c36 <_printf_i+0x20a>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	f104 0619 	add.w	r6, r4, #25
 8004c64:	e7f5      	b.n	8004c52 <_printf_i+0x226>
 8004c66:	bf00      	nop
 8004c68:	08004de1 	.word	0x08004de1
 8004c6c:	08004df2 	.word	0x08004df2

08004c70 <memmove>:
 8004c70:	4288      	cmp	r0, r1
 8004c72:	b510      	push	{r4, lr}
 8004c74:	eb01 0402 	add.w	r4, r1, r2
 8004c78:	d902      	bls.n	8004c80 <memmove+0x10>
 8004c7a:	4284      	cmp	r4, r0
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	d807      	bhi.n	8004c90 <memmove+0x20>
 8004c80:	1e43      	subs	r3, r0, #1
 8004c82:	42a1      	cmp	r1, r4
 8004c84:	d008      	beq.n	8004c98 <memmove+0x28>
 8004c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8e:	e7f8      	b.n	8004c82 <memmove+0x12>
 8004c90:	4402      	add	r2, r0
 8004c92:	4601      	mov	r1, r0
 8004c94:	428a      	cmp	r2, r1
 8004c96:	d100      	bne.n	8004c9a <memmove+0x2a>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca2:	e7f7      	b.n	8004c94 <memmove+0x24>

08004ca4 <_sbrk_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4d06      	ldr	r5, [pc, #24]	; (8004cc0 <_sbrk_r+0x1c>)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f7fb ff54 	bl	8000b5c <_sbrk>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_sbrk_r+0x1a>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_sbrk_r+0x1a>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	2000034c 	.word	0x2000034c

08004cc4 <memcpy>:
 8004cc4:	440a      	add	r2, r1
 8004cc6:	4291      	cmp	r1, r2
 8004cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ccc:	d100      	bne.n	8004cd0 <memcpy+0xc>
 8004cce:	4770      	bx	lr
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cda:	4291      	cmp	r1, r2
 8004cdc:	d1f9      	bne.n	8004cd2 <memcpy+0xe>
 8004cde:	bd10      	pop	{r4, pc}

08004ce0 <_realloc_r>:
 8004ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	460e      	mov	r6, r1
 8004cea:	b921      	cbnz	r1, 8004cf6 <_realloc_r+0x16>
 8004cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	f7ff bc49 	b.w	8004588 <_malloc_r>
 8004cf6:	b92a      	cbnz	r2, 8004d04 <_realloc_r+0x24>
 8004cf8:	f7ff fbda 	bl	80044b0 <_free_r>
 8004cfc:	4625      	mov	r5, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d04:	f000 f81b 	bl	8004d3e <_malloc_usable_size_r>
 8004d08:	4284      	cmp	r4, r0
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	d802      	bhi.n	8004d14 <_realloc_r+0x34>
 8004d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d12:	d812      	bhi.n	8004d3a <_realloc_r+0x5a>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4640      	mov	r0, r8
 8004d18:	f7ff fc36 	bl	8004588 <_malloc_r>
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d0ed      	beq.n	8004cfe <_realloc_r+0x1e>
 8004d22:	42bc      	cmp	r4, r7
 8004d24:	4622      	mov	r2, r4
 8004d26:	4631      	mov	r1, r6
 8004d28:	bf28      	it	cs
 8004d2a:	463a      	movcs	r2, r7
 8004d2c:	f7ff ffca 	bl	8004cc4 <memcpy>
 8004d30:	4631      	mov	r1, r6
 8004d32:	4640      	mov	r0, r8
 8004d34:	f7ff fbbc 	bl	80044b0 <_free_r>
 8004d38:	e7e1      	b.n	8004cfe <_realloc_r+0x1e>
 8004d3a:	4635      	mov	r5, r6
 8004d3c:	e7df      	b.n	8004cfe <_realloc_r+0x1e>

08004d3e <_malloc_usable_size_r>:
 8004d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d42:	1f18      	subs	r0, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfbc      	itt	lt
 8004d48:	580b      	ldrlt	r3, [r1, r0]
 8004d4a:	18c0      	addlt	r0, r0, r3
 8004d4c:	4770      	bx	lr
	...

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
